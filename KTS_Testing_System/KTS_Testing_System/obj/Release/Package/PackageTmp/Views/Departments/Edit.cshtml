@model KTS_Testing_System.ViewModel.LibraryVM

@{
    ViewBag.Title = "Edit";
}

@using (Html.BeginForm("Update", "Departments", FormMethod.Post, new { id = "departmentForm" }))
{

    @Html.AntiForgeryToken()
    if (!ViewData.ModelState.IsValid)
    {
        <div class="msg-block alert alert-danger alert-dismissible" role="alert" style="margin:10px;">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            @Html.ValidationSummary(true, "")
        </div>
    }
    <div class="row panel-heading bg-system">
        Edit Department

        @*@Html.HiddenFor(m => m.prStatus)*@

        <div class="floatright">
            <div class="col-md-12">
                <input value="Update" name="processingStatus" id="processingStatus" onclick="submitDepartmentOnClick(this)" class="btn btn-bg-system" type="button">

                @Html.ActionLink("Back To List", "Index", "Departments", null, htmlAttributes: new { @class = "btn btn-bg-system" })
            </div>
        </div>
    </div>


    <div>

        <div class="row top-spacing">
            <div class="panel panel-default">
                <div class="panel-heading">
                    Department Details
                </div>

                <div class="panel-body">

                    @Html.HiddenFor(model => model.department.department_id)
                    <div class="row">
                        <div class="row top-spacing">
                            <div class="form-group">

                                @Html.LabelFor(model => model.department.description, "Department Name", htmlAttributes: new { @class = "control-label col-lg-2 col-md-2 col-sm-2 " })
                                <div class="col-lg-4 col-md-4 col-sm-4">

                                    @Html.TextBoxFor(model => model.department.description, new { @class = "form-control mandatoryField", @autocomplete = "off", @maxlength = "128" })
                                    @Html.ValidationMessageFor(model => model.questionLevels.description, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>

        </div>

        @*<div class="row top-spacing">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        Roles
                    </div>
                    <div class="panel-body">

                        <div role="tabpanel" id="RolesPanel">

                            @Html.Partial("RolesPanel", Model)

                        </div>

                    </div>
                </div>
            </div>*@



    </div>

}

@section scripts
{

    <script src="~/Scripts/ViewScripts/Library_Scripts.js"></script>
    @if (Model != null && !string.IsNullOrEmpty(Model.MessageDescription))
    {
        <script> sweetAlert("", "@Model.MessageDescription", "error"); </script>
    }


}
