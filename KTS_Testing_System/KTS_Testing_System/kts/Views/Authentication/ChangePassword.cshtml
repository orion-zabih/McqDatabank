@model ECP_RTS_MIS.Models.ChangePasswordRequestModel

@{
    ViewBag.Title = "ChangePassword";
}


<div class="row">
    @using (Html.BeginForm("ChangePassword", "Authentication", FormMethod.Post))
    {

        @Html.AntiForgeryToken()
       
        <div class="col-lg-12">
            <div class="block-center mt-xl wd-xl " style="margin-top:180px !important; box-shadow:0 3px 1px -2px rgba(0,0,0,.14),0 2px 2px 0 rgba(0,0,0,.098),0 1px 5px 0 rgba(0,0,0,.084);">
                <!-- START panel-->
                <div class="panel panel-dark panel-flat" style="border:none!important">
                    <div class="panel-heading text-center">
                        <a href="#">
                            <img src="~/Content/images/kmc_logo.png" style="width:100%;" alt="Image" class="block-center img-rounded">
                            @*<img src="/Content/images/ECP-LOGO-white.png" style="width:100%" alt="Image" class="block-center img-rounded">*@
            </a>
        </div>


        <div class="panel-body">
            @if (Model.isSelfPassWordChange)
    {
                <p class="text-center pv">Change Password - User: <span class="label label-orange">@Html.DisplayFor(model => model.Username)</span></p>
            }
            else
            {
                <p class="text-center pv">Password Reset - User: <span class="label label-orange">@Html.DisplayFor(model => model.Username)</span></p>
            }

            @Html.HiddenFor(model => model.Username)
            @Html.HiddenFor(model => model.Code)
            @if (Model.isSelfPassWordChange)
    {
                <p class="text-center">Please fill in below fields to reset your password</p>
            }
            else
            {
                <p class="text-center">Your password has been expired or you are logging in for the first time. Please fill in below fields to reset your password</p>
            }
            <div class="form-group has-feedback">

                @Html.LabelFor(model => model.OldPassword, htmlAttributes: new { @class = "text-muted" })

                @Html.PasswordFor(model => model.OldPassword, new { @class = "form-control text-box single-line", placeholder = "Please enter Old Password" })

                @*<span class="fa icon-lock form-control-feedback text-muted"></span>*@
                        </div>
                        <div class="form-group has-feedback">

                            @Html.LabelFor(model => model.NewPassword, htmlAttributes: new { @class = "text-muted" })

                            @Html.PasswordFor(model => model.NewPassword, new { @class = "form-control text-box single-line", placeholder = "Please enter New Password" })

                            @*<span class="fa icon-lock form-control-feedback text-muted"></span>*@
                        </div>
                        <div class="form-group has-feedback">

                            @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "text-muted" })

                            @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "form-control text-box single-line", placeholder = "Please enter Confirm Password" })

                            @*<span class="fa icon-lock form-control-feedback text-muted"></span>*@
                        </div>
                        @if (!ViewData.ModelState.IsValid)
                        {
                        <div class="msg-block alert alert-danger alert-dismissible" role="alert" style="margin:10px;">
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                            @Html.ValidationSummary(true, "")
                        </div>
                        }
                        @if (Model.isSelfPassWordChange)
                {
                            <div>
                                <div class="col-lg-6 col-md-6">
                                    <button type="submit" onclick="RefreshValidation()" class="btn btn-danger btn-block mt-lg">Reset</button>
                                </div>
                                <div class="col-lg-6 col-md-6">
                                    <a href="~/Home/Index" class="btn btn-bg-system btn-block mt-lg">Cancel</a>

                                </div>
                            </div>
                        }
                        else
                        {
                            <button type="submit" class="btn btn-danger btn-block mt-lg">Reset</button>
                        }


                    </div>
                </div>
                
            </div>
        </div>
        @*<div class="form-horizontal">
                <hr />

                <div class="form-group">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>

                <div>
                    @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationSummary(false, "", new { @class = "text-danger" }).ToHtmlString()))
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Submit" class="btn btn-default" />
                    </div>
                </div>
            </div>*@

    }
</div>
@section scripts{
    <script>
        function RefreshValidation() {

            $("form").removeData("validator");
            $("form").removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse("form");
        }
    </script>
}